//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ADLXWrapper {

public class ADLX_CustomResolution : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ADLX_CustomResolution(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ADLX_CustomResolution obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ADLX_CustomResolution() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_ADLX_CustomResolution(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int resWidth {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_resWidth_set(swigCPtr, value);
    } 
    get {
      int ret = ADLXPINVOKE.ADLX_CustomResolution_resWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int resHeight {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_resHeight_set(swigCPtr, value);
    } 
    get {
      int ret = ADLXPINVOKE.ADLX_CustomResolution_resHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int refreshRate {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_refreshRate_set(swigCPtr, value);
    } 
    get {
      int ret = ADLXPINVOKE.ADLX_CustomResolution_refreshRate_get(swigCPtr);
      return ret;
    } 
  }

  public ADLX_DISPLAY_SCAN_TYPE presentation {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_presentation_set(swigCPtr, (int)value);
    } 
    get {
      ADLX_DISPLAY_SCAN_TYPE ret = (ADLX_DISPLAY_SCAN_TYPE)ADLXPINVOKE.ADLX_CustomResolution_presentation_get(swigCPtr);
      return ret;
    } 
  }

  public ADLX_TIMING_STANDARD timingStandard {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_timingStandard_set(swigCPtr, (int)value);
    } 
    get {
      ADLX_TIMING_STANDARD ret = (ADLX_TIMING_STANDARD)ADLXPINVOKE.ADLX_CustomResolution_timingStandard_get(swigCPtr);
      return ret;
    } 
  }

  public int GPixelClock {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_GPixelClock_set(swigCPtr, value);
    } 
    get {
      int ret = ADLXPINVOKE.ADLX_CustomResolution_GPixelClock_get(swigCPtr);
      return ret;
    } 
  }

  public ADLX_TimingInfo detailedTiming {
    set {
      ADLXPINVOKE.ADLX_CustomResolution_detailedTiming_set(swigCPtr, ADLX_TimingInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = ADLXPINVOKE.ADLX_CustomResolution_detailedTiming_get(swigCPtr);
      ADLX_TimingInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ADLX_TimingInfo(cPtr, false);
      return ret;
    } 
  }

  public ADLX_CustomResolution() : this(ADLXPINVOKE.new_ADLX_CustomResolution(), true) {
  }

}

}
